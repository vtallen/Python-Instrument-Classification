'''
**************************************************************************************************
* Filename:    cleandata.py                                                                      *
*                                                                                                *
* Description: Opens the arff file generated by extractFreqARFF.py and removes all lines whose   *
*              first attribute is equal to 0.0 or nan. The files this data came from were either *
*              silence or did not have enough audio information to perform an FFT. Lines whose   *
*              length is less than the number of header attributes are also discarded. This can  *
*              happen when there are not enough peaks in the fft to produce a full 32            *
*                                                                                                *
* Usage:       python3 cleandata.py <infile> <outffile>                                          *
*                   <infile>    - The file to clean                                              *
*                   <outfile>   - The destination filename, can be the same as <infile>          *
*                                 it does not exist                                              *
*                                                                                                *
*              python3 cleandata.py <folder> - Cleans all files in a given folder.               *
*                                              Does so inplace                                   *
*                   <folder>    - The folder to clean arff files from                            *
**************************************************************************************************
'''
import csv
import sys
import glob

__USAGE__ = "USAGE:"\
        "python3 cleandata.py <infile.arff> <outfile.arff> - cleans a single file"\
        "python3 cleandata.py <filesdir> - cleans all arff files in <filesdir>"

'''
* ********************************************************************************************** *
*                                                                                                *
* Name:             clean_file                                                                   *
*                                                                                                *
* Parameters:       str filename         - The file to clean                                     *
*                   str outfilename = '' - The file to save the cleaned file as. Defaults to     *
*                                          the value of filename (clean in place)                *
*                                                                                                *
* Purpose:          Removes bad data from the given arff file. These are lines that contain no   *
*                   audio data, so they start with a 0 or nan. Also removes short rows. These    *
*                   occur when there is not enough audio data in a snippet to extract all the    *
*                   requested harmonics                                                          *
*                                                                                                *
* ********************************************************************************************** *
'''
def clean_file(filename, outfilename=''):
    if outfilename == '':
        outfilename = filename

    file = open(filename, 'r')
    header = []
    numcols = 0
    
    # Pulls out the arff header data
    line = file.readline().strip()
    while True:
        header.append(line)
        if line.startswith('@attribute'):
            numcols += 1

        if line == '@data':
            break


        line = file.readline().strip()
    
    # Now the file is just a csv
    incsv = csv.reader(file)
    origdata = []
    for row in incsv:
        origdata.append(row) 

    file.close()

    outfile = open(outfilename, 'w')
    for line in header:
        outfile.write(line + '\n')

    outcsv = csv.writer(outfile)
    
    # Find how many cols each row should have
    # Finds the first row that does not start with a 0 or nan and stores its length
    rowlen = 0
    if origdata[0][0] != 'nan' and origdata[0][0] != '0.0':
        rowlen = len(origdata[0][0])
    else:
        for row in origdata:
            if origdata[0][0] != 'nan' and origdata[0][0] != '0.0':
                rowlen = len(origdata[0][0])
                break

    # excludes rows that have 0.0 ampl vals, or nan 
    for row in origdata:
        if row[0] != 'nan' and row[0] != '0.0' and len(row) == rowlen:
            outcsv.writerow(row)

    outfile.close()


if __name__ == "__main__":
    argv = sys.argv
    argc = len(argv)

    if argc != 3 and argc != 2:
        print(__USAGE__)
        sys.exit(1)
    
    if argc == 3:
        filename = argv[1]
        outfilename = argv[2]
        clean_file(filename, outfilename)
    elif argc == 2:
        files_to_clean = glob.glob(argv[1] + '*.arff')
        print('argv', argv)
        print('Cleaning files:', files_to_clean)
        for filename in files_to_clean:
            clean_file(filename, filename)
                  

